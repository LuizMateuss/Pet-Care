name: Project deployment test
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
on:
  push:
    branches:
      # - pre-main
      - teste-actions
    paths:
      - 'API/PHP/slim/**'
      - '.github/**'
jobs:
  # Deploy-Preview-To-Vercel:
  #   runs-on: ubuntu-latest
  #   environment: pre-main
  #   outputs:
  #     vercel-link: ${{ steps.vercel-deploy.outputs.link }}
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Install Vercel CLI
  #       run: npm install --global vercel@latest

  #     - name: Install dependencies
  #       uses: php-actions/composer@v6
  #       with:
  #         working_dir: "API/PHP/slim/api"

  #     - name: Create .env arquive
  #       run: |
  #         echo "SGBD=${{ secrets.SGBD }}" >> ./API/PHP/slim/api/.env
  #         echo "HOST=${{ secrets.HOST }}" >> ./API/PHP/slim/api/.env
  #         echo "PORT=${{ secrets.PORT }}" >> ./API/PHP/slim/api/.env
  #         echo "DATABASE=${{ secrets.DATABASE }}" >> ./API/PHP/slim/api/.env
  #         echo "USER=${{ secrets.USER }}" >> ./API/PHP/slim/api/.env
  #         echo "PASSWD=${{ secrets.PASSWD }}" >> ./API/PHP/slim/api/.env
  #         echo "DISPLAY_ERROR=${{ secrets.DISPLAY_ERROR }}" >> ./API/PHP/slim/api/.env

  #     - name: Pull Vercel Environment Information
  #       working-directory: ./API/PHP/slim
  #       run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

  #     - name: Build Project Artifacts
  #       working-directory: ./API/PHP/slim
  #       run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

  #     - name: Deploy Project Artifacts to Vercel
  #       working-directory: ./API/PHP/slim
  #       id: vercel-deploy
  #       run: |
  #         vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} > deployment-url.txt
  #         code=$?
  #         if [ $code -eq 0 ]; then
  #             deploymentUrl=`cat deployment-url.txt`
  #         else
  #             errorMessage=`cat error.txt`
  #             echo "There was an error: $errorMessage"
  #         fi
  #         echo "link=$deploymentUrl" >> "$GITHUB_OUTPUT"
  
  # Mobile-Update:
  #   runs-on: ubuntu-latest
  #   environment: pre-main
  #   needs: Deploy-Preview-To-Vercel
  #   outputs:
  #     androidId: ${{ steps.preview.outputs.androidId }}
  #     iosId: ${{ steps.preview.outputs.iosId }}
  #     qr: ${{ steps.preview.outputs.qr }}
  #   steps:
  #     - name: üèó Setup repo
  #       uses: actions/checkout@v3

  #     - name: üèó Setup Node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 20.x
  #         cache: npm
  #         cache-dependency-path: Mobile/package-lock.json
        
  #     - name: üèó Setup Expo and EAS
  #       uses: expo/expo-github-action@v8
  #       with:
  #         expo-version: latest
  #         eas-version: latest
  #         token: ${{ secrets.EXPO_TOKEN_DEV }}

  #     - name: üì¶ Install dependencies
  #       working-directory: ./Mobile
  #       run: npm install

  #     - name: üöÄ Create preview
  #       uses: expo/expo-github-action/preview@v8
  #       env:
  #         SERVER_LINK: ${{needs.Deploy-Preview-To-Vercel.outputs.vercel-link}}
  #         GOOGLE_MAP_API_KEY: ${{ secrets.GOOGLE_MAP_API_KEY }}
  #       id: preview
  #       with:
  #         command: eas update --auto
  #         comment: false
  #         working-directory: ./Mobile

  #     - name: teste1
  #       run: |
  #         echo "Id ${{ steps.preview.outputs.groupId }}"
  #         echo "QRCode: ${{ steps.preview.outputs.qr }}"

  #         echo "androidId ${{ steps.preview.outputs.androidId }}"
  #         echo "androidQR ${{ steps.preview.outputs.androidQR }}"

  #         echo "iosId ${{ steps.preview.outputs.iosId }}"
  #         echo "iosQR ${{ steps.preview.outputs.iosQR }}"

  #         echo "androidId=${{ steps.preview.outputs.androidId }}" >> "$GITHUB_OUTPUT"
  #         echo "iosId=${{ steps.preview.outputs.iosId }}" >> "$GITHUB_OUTPUT"
  #         echo "androidQR=${{ steps.preview.outputs.qr }}" >> "$GITHUB_OUTPUT"
  
  Update-Readme:
    runs-on: ubuntu-latest
    environment: pre-main
    # needs: Mobile-Update
    steps:
      - name: üèó Setup repo
        uses: actions/checkout@v3
        with:
          sparse-checkout: README.md
          sparse-checkout-cone-mode: false

      - name: teste2
        run: |
          # androidId=${{ needs.Mobile-Update.outputs.androidId }}
          # iosId=${{ needs.Mobile-Update.outputs.iosId }}
          # qrCode=${{ needs.Mobile-Update.outputs.qr }}
          qrCode="https://qr.expo.dev/eas-update?projectId=123"

          # sed -i "/^PetCare Android:/,/exp:\/\/u.expo.dev\/update\/.*/s#exp://u.expo.dev/update/.*#exp://u.expo.dev/update/$androidId#" README.md
          # sed -i "/^PetCare iPhone:/,/exp:\/\/u.expo.dev\/update\/.*/s#exp://u.expo.dev/update/.*#exp://u.expo.dev/update/$iosId#" README.md
          sed -i "s#https://qr.expo.dev/eas-update?projectId=[^ )\x22]*#$qrCode#g" README.md

          git config user.name LuizMateuss
          git config user.email 99288913+LuizMateuss@users.noreply.github.com
          git add README.md
          git commit -m "Updated Readme"
          # git commit --amend --no-edit
          git push





# https://vercel.com/docs/cli/deploy#standard-output-usage
# https://docs.expo.dev/develop/development-builds/share-with-your-team/
# https://docs.expo.dev/eas-update/github-actions/#publish-previews-on-pull-requests
# https://github.com/expo/expo-github-action/tree/main/preview#readme


# https://docs.expo.dev/build-reference/variants/

# https://github.com/endroid/qr-code/blob/main/README.md